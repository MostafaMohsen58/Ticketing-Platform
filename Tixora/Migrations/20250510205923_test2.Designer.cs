// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tixora.Models.Context;

#nullable disable

namespace Tixora.Migrations
{
    [DbContext(typeof(TixoraContext))]
    [Migration("20250510205923_test2")]
    partial class test2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tixora.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBrith")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Tixora.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Tixora.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Entertainment",
                            Description = "An evening with Egypt's top comedians",
                            ImageUrl = "images/comedy-night.jpg",
                            OrganizerId = 1,
                            StartDate = new DateTime(2025, 6, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Stand-Up Comedy Night",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "Sports",
                            Description = "The classic Cairo football derby",
                            ImageUrl = "images/AlahlyVsZam.jpg",
                            OrganizerId = 2,
                            StartDate = new DateTime(2025, 7, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Al Ahly vs Zamalek Derby",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 3,
                            Category = "Entertainment",
                            Description = "Annual technology conference",
                            ImageUrl = "images/Trends.jpg",
                            OrganizerId = 3,
                            StartDate = new DateTime(2025, 7, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tech Trends 2025",
                            VenueId = 3
                        },
                        new
                        {
                            Id = 4,
                            Category = "Entertainment",
                            Description = "Scientific lecture on artificial intelligence",
                            ImageUrl = "images/Future.jpg",
                            OrganizerId = 4,
                            StartDate = new DateTime(2025, 8, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Future of AI",
                            VenueId = 4
                        },
                        new
                        {
                            Id = 5,
                            Category = "Sports",
                            Description = "The classic Cairo football derby",
                            ImageUrl = "images/PortovsAlahly.jpg",
                            OrganizerId = 2,
                            StartDate = new DateTime(2025, 7, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Al Ahly vs FC Porto",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 6,
                            Category = "Sports",
                            Description = "The classic Cairo football derby",
                            ImageUrl = "images/LivvsChe.jpg",
                            OrganizerId = 2,
                            StartDate = new DateTime(2025, 7, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Liverpool vs chelsea",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 7,
                            Category = "Sports",
                            Description = "The classic Cairo football derby",
                            ImageUrl = "images/barcavsreal.jpeg",
                            OrganizerId = 2,
                            StartDate = new DateTime(2025, 7, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Barcelona vs Real Madrid",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 8,
                            Category = "Sports",
                            Description = "The classic Cairo football derby",
                            ImageUrl = "images/Manvscity.jpeg",
                            OrganizerId = 2,
                            StartDate = new DateTime(2025, 7, 1, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Manchester United vs Manchester City",
                            VenueId = 2
                        });
                });

            modelBuilder.Entity("Tixora.Models.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactEmail = "info@comedyclub.com",
                            ContactPhone = "01032567599",
                            LogoUrl = "comedyLogo.jpg",
                            Name = "Comedy Club Egypt"
                        },
                        new
                        {
                            Id = 2,
                            ContactEmail = "info@efa.com",
                            ContactPhone = "0223456789",
                            LogoUrl = "footlogo.jpg",
                            Name = "Egyptian Football Association"
                        },
                        new
                        {
                            Id = 3,
                            ContactEmail = "contact@techsummit.org",
                            ContactPhone = "01012345678",
                            LogoUrl = "TechLogo.jpg",
                            Name = "Tech Summit Org"
                        },
                        new
                        {
                            Id = 4,
                            ContactEmail = "info@science.org",
                            ContactPhone = "0229876543",
                            LogoUrl = "SciLogo.jpg",
                            Name = "Science Foundation"
                        });
                });

            modelBuilder.Entity("Tixora.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TicketCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableQuantity = 50,
                            EventId = 1,
                            Price = 500m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableQuantity = 150,
                            EventId = 1,
                            Price = 300m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            AvailableQuantity = 100,
                            EventId = 1,
                            Price = 150m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            AvailableQuantity = 500,
                            EventId = 2,
                            Price = 1000m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            AvailableQuantity = 5000,
                            EventId = 2,
                            Price = 500m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            AvailableQuantity = 2000,
                            EventId = 2,
                            Price = 250m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 7,
                            AvailableQuantity = 30,
                            EventId = 3,
                            Price = 800m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 8,
                            AvailableQuantity = 200,
                            EventId = 3,
                            Price = 400m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 9,
                            AvailableQuantity = 100,
                            EventId = 3,
                            Price = 280m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 10,
                            AvailableQuantity = 300,
                            EventId = 4,
                            Price = 200m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            AvailableQuantity = 150,
                            EventId = 4,
                            Price = 100m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 12,
                            AvailableQuantity = 500,
                            EventId = 5,
                            Price = 1000m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 13,
                            AvailableQuantity = 5000,
                            EventId = 5,
                            Price = 500m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 14,
                            AvailableQuantity = 2000,
                            EventId = 5,
                            Price = 250m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 15,
                            AvailableQuantity = 500,
                            EventId = 6,
                            Price = 1000m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 16,
                            AvailableQuantity = 5000,
                            EventId = 6,
                            Price = 500m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 17,
                            AvailableQuantity = 2000,
                            EventId = 6,
                            Price = 250m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 18,
                            AvailableQuantity = 500,
                            EventId = 7,
                            Price = 1000m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 19,
                            AvailableQuantity = 5000,
                            EventId = 7,
                            Price = 500m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 20,
                            AvailableQuantity = 2000,
                            EventId = 7,
                            Price = 250m,
                            Status = 0,
                            TicketCategoryId = 3
                        },
                        new
                        {
                            Id = 21,
                            AvailableQuantity = 500,
                            EventId = 8,
                            Price = 1000m,
                            Status = 0,
                            TicketCategoryId = 1
                        },
                        new
                        {
                            Id = 22,
                            AvailableQuantity = 5000,
                            EventId = 8,
                            Price = 500m,
                            Status = 0,
                            TicketCategoryId = 2
                        },
                        new
                        {
                            Id = 23,
                            AvailableQuantity = 2000,
                            EventId = 8,
                            Price = 250m,
                            Status = 0,
                            TicketCategoryId = 3
                        });
                });

            modelBuilder.Entity("Tixora.Models.TicketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("PriceMultiplier")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("TicketCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "VIP seating with complimentary drinks",
                            Name = "VIP",
                            PriceMultiplier = 2f
                        },
                        new
                        {
                            Id = 2,
                            Description = "Regular seating",
                            Name = "Regular",
                            PriceMultiplier = 1f
                        },
                        new
                        {
                            Id = 3,
                            Description = "Discounted ticket for students",
                            Name = "Student",
                            PriceMultiplier = 0.5f
                        });
                });

            modelBuilder.Entity("Tixora.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cairo, Egypt",
                            Capacity = 2000,
                            Name = "Cairo House"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nasr City, Cairo",
                            Capacity = 75000,
                            Name = "Cairo International Stadium"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Alexandria",
                            Capacity = 1500,
                            Name = "Bibliotheca Alexandrina"
                        },
                        new
                        {
                            Id = 4,
                            Address = "New Cairo",
                            Capacity = 500,
                            Name = "American University in Cairo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tixora.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tixora.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tixora.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tixora.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tixora.Models.Booking", b =>
                {
                    b.HasOne("Tixora.Models.Ticket", "Ticket")
                        .WithMany("Bookings")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tixora.Models.ApplicationUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tixora.Models.Event", b =>
                {
                    b.HasOne("Tixora.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tixora.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Tixora.Models.Ticket", b =>
                {
                    b.HasOne("Tixora.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tixora.Models.TicketCategory", "TicketCategory")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TicketCategory");
                });

            modelBuilder.Entity("Tixora.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Tixora.Models.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Tixora.Models.Organizer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Tixora.Models.Ticket", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Tixora.Models.TicketCategory", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Tixora.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
